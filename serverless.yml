service: apirest-mercadolibre-serverless

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment: ${file(./serverless_ssm.yml)}
  apiGateway:
    description: Api gateway for managing requests between lambdas
    restApiId: xxxx
    restApiRootResourceId: xxxx
    resourcePolicy:
      - Effect: Allow
        Principal: '*'
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*
    apiKeys:
      - name: xApiKey
        value: ${file(./serverless_ssm.yml):X_API_KEY}
  logs:
    # Enable REST API logs
    restApi:
      accessLogging: true
      format: "requestId: $context.requestId"
      executionLogging: true
      level: INFO
      fullExecutionData: true
      role: arn:aws:iam::xxxx:role
      roleManagedExternally: false

plugins:
  - serverless-auto-swagger
  - serverless-offline-ssm
  - serverless-offline

functions:
  databaseTest:
    handler: src/controllers/db/connection.handler
    description: Function in charge of checking the connection to the db
    events:
      - http:
          path: /v1/db-connection
          method: get
          private: true
  getAllUsers:
    handler: src/controllers/users/getAll.handler
    description: Function in charge of obtaining the paginated list of users of the db
    events:
      - http:
          path: /v1/users/list
          method: get
          private: true
          cors:
            origin: ${file(./serverless_ssm.yml):SWAGGER_BASE_PATH_CORS}
  getByIdUsers:
    handler: src/controllers/users/getById.handler
    description: Function in charge of obtaining a user according to his id of the db
    events:
      - http:
          path: /v1/users/id/{id}
          method: get
          private: true
  getLikeNicknameUsers:
    handler: src/controllers/users/getLikeNickname.handler
    description: Function in charge of obtaining a paginated list of users according to their nickname of the db
    events:
      - http:
          path: /v1/users/nickname/{nickname}
          method: get
          private: true
  getLikeFirstNameUsers:
    handler: src/controllers/users/getLikeFirstName.handler
    description: Function in charge of obtaining a paginated list of users according to their firstname of the db
    events:
      - http:
          path: /v1/users/first-name/{firstName}
          method: get
          private: true
  getLikeLastNameUsers:
    handler: src/controllers/users/getLikeLastName.handler
    description: Function in charge of obtaining a paginated list of users according to their lastname of the db
    events:
      - http:
          path: /v1/users/last-name/{lastName}
          method: get
          private: true
  getLikeIdentificationTypeUsers:
    handler: src/controllers/users/getLikeIdentificationType.handler
    description: Function in charge of obtaining a paginated list of users according to their identification type of the db
    events:
      - http:
          path: /v1/users/identification-type/{identificationType}
          method: get
          private: true
  getLikeIdentificationNumberUsers:
    handler: src/controllers/users/getLikeIdentificationNumber.handler
    description: Function in charge of obtaining a paginated list of users according to their identification number of the db
    events:
      - http:
          path: /v1/users/identification-number/{identificationNumber}
          method: get
          private: true
  getLikeCountryIdUsers:
    handler: src/controllers/users/getLikeCountryId.handler
    description: Function in charge of obtaining a paginated list of users according to their country id of the db
    events:
      - http:
          path: /v1/users/country-id/{countryId}
          method: get
          private: true
  getLikeEmailUsers:
    handler: src/controllers/users/getLikeEmail.handler
    description: Function in charge of obtaining a paginated list of users according to their email of the db
    events:
      - http:
          path: /v1/users/email/{email}
          method: get
          private: true
  getLikeCreationDateUsers:
    handler: src/controllers/users/getLikeCreationDate.handler
    description: Function in charge of obtaining a paginated list of users according to their creation date of the db
    events:
      - http:
          path: /v1/users/creation-date/{creationDate}
          method: get
          private: true
  getLikeUpdateDateUsers:
    handler: src/controllers/users/getLikeUpdateDate.handler
    description: Function in charge of obtaining a paginated list of users according to their update date of the db
    events:
      - http:
          path: /v1/users/update-date/{updateDate}
          method: get
          private: true
  addUser:
    handler: src/controllers/users/addUser.handler
    description: Function in charge of adding a user to the db
    events:
      - http:
          path: /v1/users/add-user/
          method: post
          private: true
  updateUser:
    handler: src/controllers/users/updateUser.handler
    description: Function in charge of update a user to the db
    events:
      - http:
          path: /v1/users/update-user/{id}
          method: put
          private: true
  deleteUser:
    handler: src/controllers/users/deleteUser.handler
    description: Function in charge of eliminate a user to the db
    events:
      - http:
          path: /v1/users/delete-user/{id}
          method: delete
          private: true

resources:
  - ${file(src/resources/api-gateway.yml)}

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  serverless-offline-ssm:
    stages:
      - dev
    ssm: ${file(./serverless_ssm.yml)}
  autoswagger:
    title: 'Microservice_Mercadolibre_Users_AWS'
    apiType: 'http'
    generateSwaggerOnDeploy: true
    typefiles: ['./src/utils/swagger/definition.ts']
    basePath: '/swagger/'
    host: ${file(./serverless_ssm.yml):APP_LOCALHOST}
    schemes: ['http', 'https', 'ws', 'wss']
    useRedirectUI: true
