service: apirest-mercadolibre-serverless

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment: ${file(./serverless_ssm.yml)}
  apiGateway:
    apiKeys:
      - name: xApiKey
        value: ${file(./serverless_ssm.yml):X_API_KEY}
  logs:
    restApi:
      # Enables HTTP access logs (default: true)
      accessLogging: true
      # Log format to use for access logs
      format: "requestId: $context.requestId"
      # Enable execution logging (default: true)
      executionLogging: true
      # Log level to use for execution logging: INFO or ERROR
      level: INFO
      # Log full requests/responses for execution logging (default: true)
      fullExecutionData: true
      # Existing IAM role to use for API Gateway when writing CloudWatch Logs (default: automatically created)
      role: arn:aws:iam::123456:role
      # Whether the API Gateway CloudWatch Logs role setting is not managed by Serverless (default: false)
      roleManagedExternally: false

plugins:
  - serverless-offline-ssm
  - serverless-offline

functions:
  helloTest:
    handler: src/controllers/test/hello.handler
    events:
      - http:
          path: /test
          method: get
          private: true
  databaseTest:
    handler: src/controllers/db/connection.handler
    events:
      - http:
          path: /db-connection
          method: get
          private: true
  getAllUsers:
    handler: src/controllers/users/getAll.handler
    events:
      - http:
          path: /users/list
          method: get
          private: true
  getByIdUsers:
    handler: src/controllers/users/getById.handler
    events:
      - http:
          path: /users/id/{id}
          method: get
          private: true
  getLikeNicknameUsers:
    handler: src/controllers/users/getLikeNickname.handler
    events:
      - http:
          path: /users/nickname/{nickname}
          method: get
          private: true
  getLikeFirstNameUsers:
    handler: src/controllers/users/getLikeFirstName.handler
    events:
      - http:
          path: /users/first-name/{firstName}
          method: get
          private: true
  getLikeLastNameUsers:
    handler: src/controllers/users/getLikeLastName.handler
    events:
      - http:
          path: /users/last-name/{lastName}
          method: get
          private: true
  getLikeIdentificationTypeUsers:
    handler: src/controllers/users/getLikeIdentificationType.handler
    events:
      - http:
          path: /users/identification-type/{identificationType}
          method: get
          private: true
  getLikeIdentificationNumberUsers:
    handler: src/controllers/users/getLikeIdentificationNumber.handler
    events:
      - http:
          path: /users/identification-number/{identificationNumber}
          method: get
          private: true
  getLikeCountryIdUsers:
    handler: src/controllers/users/getLikeCountryId.handler
    events:
      - http:
          path: /users/country-id/{countryId}
          method: get
          private: true
  getLikeEmailUsers:
    handler: src/controllers/users/getLikeEmail.handler
    events:
      - http:
          path: /users/email/{email}
          method: get
          private: true
  getLikeCreationDateUsers:
    handler: src/controllers/users/getLikeCreationDate.handler
    events:
      - http:
          path: /users/creation-date/{creationDate}
          method: get
          private: true
  getLikeUpdateDateUsers:
    handler: src/controllers/users/getLikeUpdateDate.handler
    events:
      - http:
          path: /users/update-date/{updateDate}
          method: get
          private: true
  addUser:
    handler: src/controllers/users/addUser.handler
    events:
      - http:
          path: /users/add-user/
          method: post
          private: true
  updateUser:
    handler: src/controllers/users/updateUser.handler
    events:
      - http:
          path: /users/update-user/{id}
          method: put
          private: true
  deleteUser:
    handler: src/controllers/users/deleteUser.handler
    events:
      - http:
          path: /users/delete-user/{id}
          method: delete
          private: true

resources:
  - ${file(src/resources/api-gateway.yml)}

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  serverless-offline-ssm:
    stages:
      - dev
    ssm: ${file(./serverless_ssm.yml)}
